"""
Project Euler Problem 2
=======================

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.
"""
import utils
import numpy as np


def solve_0(N):
    # every third term starting with second is even
    # and every third term is the sum of the previous two
    # so ... can find sum of terms up to Mth term and divide by two (plus edge effects)
    # come back to this later

    return np.sum(utils.fibs_ub(N)[1::3])


def solve(N):
    return solve_0(N)


def scratch():
    print(utils.fib(1))
    print(utils.fib(10))
    print(utils.fibs_ub(90))
    print(utils.fibs(10))
    print(utils.fibs_ub(4000000))
    return


# scratch()

print(solve(4000000))
assert(solve(90) == 44)